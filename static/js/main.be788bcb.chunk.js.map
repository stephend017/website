{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Tag","text","color","isBold","theme","useTheme","Typography","style","paddingTop","paddingBottom","paddingRight","paddingLeft","marginRight","marginBottom","borderRadius","display","backgroundColor","palette","getContrastText","fontSize","fontWeight","boxShadow","variant","App","className","ThemeProvider","CssBaseline","height","maxWidth","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be788bcb.chunk.js","sourcesContent":["import React from 'react';\nimport { Typography, ThemeProvider, CssBaseline, useTheme } from '@material-ui/core'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <ThemeProvider>\n        <CssBaseline />\n        <div style={{ paddingLeft: 64, paddingTop: 48}}>\n\n          <Typography variant=\"h2\" style={{ fontWeight: 'bold', fontSize: '5em' }}>\n            Stephen Davis\n          </Typography>\n          <div style={{ height: 16 }}></div>\n          <Typography variant=\"h6\" style={{ fontWeight: 'lighter', maxWidth: '67%' }}>\n            My name is Stephen Davis I live in West Lafayette, Indiana and I am currently a Junior \n            in Purdue Computer Science. I am a software engineer with experience in both frontend \n            and backend technologies. My hobbies include programming, cooking, hiking and watching \n            basketball. Along with my coursework I tutor and do research with Cam2 here at Purdue.\n          </Typography>\n\n          <div style={{ height: 64 }} />\n          <Typography variant=\"h4\" style={{ fontWeight: 'bold' }}>\n            Languages & Technologies\n          </Typography>\n          <div style={{ height: 32 }} />\n\n          <div style={{ width: '50%' }}>\n            <Tag text='react' color='#61dbfb' isBold />\n            <Tag text='typescript' color='#007acc' />\n            <Tag text='javascript' color='#f7df1e' />\n            <Tag text='HTML 5' color='#F16529' isBold />\n            <Tag text='C' color='#00589d' isBold />\n            <Tag text='C++' color='#00589d' isBold />\n            <Tag text='C#' color='#68217a' isBold />\n            <Tag text='Java' color='#d32d23' />\n            <Tag text='Angular' color='#e02937' />\n            <Tag text='ARM' color='#222' isBold/>\n            <Tag text='python' color='#376e9e' isBold/>\n            <Tag text='git' color='#f05033' isBold />\n            <Tag text='perforce' color='#2f6db5' isBold />\n          </div>\n\n          <div style={{ height: 64 }} />\n          <Typography variant=\"h4\" style={{ fontWeight: 'bold' }}>\n            Experience\n          </Typography>\n          <div style={{ height: 8 }} />\n          <Typography variant=\"h6\" style={{ fontWeight: 'bold', color:'#005dab' }}>\n            Qualcomm\n          </Typography>\n          <Typography variant=\"h6\" style={{ fontWeight: 'lighter', maxWidth: '33%' }}>\n            I was a Testing Automation Engineer here in the summer of 2019. I was on the WIFI 6\n            Android team and I worked with both <b style={{color: '#68217a', fontWeight: 'bold'}}>C# </b> \n            and <b style={{color: '#376e9e', fontWeight: 'bold'}}> python</b>. My main project was focused \n            around automating the execution of test cases, and data collection of test case \n            results. A notable achievement from the summer was placing top 10 in the intern \n            hackathon.\n          </Typography>\n          <div style={{ height: 16 }} />\n          <Typography variant=\"h6\" style={{ fontWeight: 'bold' }}>\n            Bloomberg\n          </Typography>\n          <Typography variant=\"h6\" style={{ fontWeight: 'lighter', maxWidth: '33%' }}>\n            I will be interning here as a software engineer in 2020!\n          </Typography>\n        </div>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nfunction Tag({ text, color, isBold }) {\n  const theme = useTheme();\n  return (\n    <Typography\n      style={{\n        paddingTop: 4,\n        paddingBottom: 4,\n        paddingRight: 16,\n        paddingLeft: 16,\n        marginRight: 16,\n        marginBottom: 16,\n        borderRadius: 4,\n        display: 'inline-block',\n        backgroundColor: color,\n        color: theme.palette.getContrastText(color),\n        fontSize: '1.5em',\n        fontWeight: isBold ? 'bold' : 'normal',\n        boxShadow: '0px 16px 32px 0px rgba(156,156,156,0.5)'\n\n      }}\n      variant='subtitle2'\n    >\n      {text}\n    </Typography>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}